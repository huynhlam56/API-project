const express = require('express');
const { Op } = require('sequelize');
const bcrypt = require('bcryptjs');

const { setTokenCookie, restoreUser, requireAuth } = require('../../utils/auth');
const { Spot, SpotImage, Review, User, ReviewImage, Booking } = require('../../db/models');

const router = express.Router();

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

//Get all of the Current User's Bookings

router.get('/current', requireAuth, async(req, res) => {
  const userId = req.user.id;

  const bookings = await Booking.findAll({
    where: { userId },
    include: [
      {
        model: Spot,
        attributes: ['id', 'ownerId', 'address', 'city', 'state', 'country', 'lat', 'lng', 'name', 'price']
      },
    ]
  })
  let bookingsArr = []
  for(let i = 0; i < bookings.length; i++) {
    let booking = bookings[i]
    let previewImage = await SpotImage.findOne({
      where: {
        spotId: bookings[i].spotId,
        preview: true
      }
    })
    let bookingObj = {
      id: booking.id,
      spotId: booking.spotId,
      Spot: {
        id: booking.spotId,
        ownerId: booking.Spot.ownerId,
        address: booking.Spot.address,
        city: booking.Spot.city,
        state: booking.Spot.state,
        country: booking.Spot.country,
        lat: booking.Spot.lat,
        lng: booking.Spot.lng,
        name: booking.Spot.name,
        price: booking.Spot.price,
        previewImage: previewImage ? previewImage.url : 'No preview'
      },
      userId: booking.userId,
      startDate: booking.startDate,
      endDate: booking.endDate,
      createdAt: booking.createdAt,
      updatedAt: booking.updatedAt
    }
    bookingsArr.push(bookingObj)
  }
  return res.json({ Bookings: bookingsArr });
})


// Edit a booking
router.put('/:id', requireAuth, async(req, res) => {
  const userId = req.user.id
  const bookingId = req.params.id
  let { startDate, endDate } = req.body;

  const booking = await Booking.findByPk(req.params.id);


  if(!booking) return res.status(404).json({"message": "Booking couldn't be found"})
  if(booking.userId !== userId) return res.status(403).json({"message": "Forbidden"})

  const currentDate = new Date();
  if (currentDate > new Date(booking.endDate)) return res.status(403).json({"message": "Past bookings can't be modified"})

  startDate = new Date(startDate);
  endDate = new Date(endDate);

  if(endDate <= startDate) {
    return res.status(400).json({
      "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
      "errors": {
        "endDate": "endDate cannot come before startDate"
    }})
  }
  const bookings = await Booking.findAll({
    where: {
      spotId: booking.spotId
    }
  })
  for (let i = 0; i < bookings.length; i++) {
    let booking = bookings[i]
    if(bookingId != booking.id) {
      let bookingStartDate = new Date(booking.startDate)
      let bookingEndDate = new Date(booking.endDate)
      if( (new Date(startDate) >= bookingStartDate && new Date(startDate) <= bookingEndDate || (new Date(endDate) >= bookingStartDate && new Date(endDate) <= bookingEndDate ))) {
        return res.status(403).json({
          "message": "Sorry, this spot is already booked for the specified dates",
          "errors": {
            "startDate": "Start date conflicts with an existing booking",
            "endDate": "End date conflicts with an existing booking"
          }
        });
      }
    }
  }
  booking.startDate = startDate;
  booking.endDate = endDate
  await booking.save()
  res.status(200).json(booking)
})

// Delete a Booking

router.delete('/:id', requireAuth, async(req, res) => {
  const bookingId = req.params.id
  const userId = req.user.id

  const booking = await Booking.findByPk(bookingId, {include: Spot})

  if(!booking) return res.status(404).json({"message": "Booking couldn't be found"})
console.log(userId, booking.userId, booking)
  if(booking.userId !== userId && booking.Spot.ownerId !== userId) {
    return res.status(403).json({
      "message": "forbidden"
     })
  }

  const currentDate = new Date();
  if (currentDate >= new Date(booking.startDate)) return res.status(403).json({"message": "Bookings that have been started can't be deleted"})

  await booking.destroy()
  res.status(200).json({  "message": "Successfully deleted"})
})


module.exports = router;
